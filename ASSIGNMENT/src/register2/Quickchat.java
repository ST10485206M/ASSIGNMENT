/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package register2;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import register2.Message;

import userdatastore.userdatastore;
/**
 *
 * @author RC_Student_lab
 */
public class Quickchat extends javax.swing.JFrame {


    // Swing component declarations (only once)
    
    /**
     * Creates new form Quickchat
     */
    private String loggedInUsername;
    
    
    public Quickchat(String username) {
        this.loggedInUsername=username;
        initComponents();
        String firstname=userdatastore.userFirstname.get(loggedInUsername);
        String lastname=userdatastore.userLastname.get(loggedInUsername);
        lblwelcomeUser.setText("Welcome " + firstname + " " + lastname + " it is great to see you. ");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnQuickChatMenu = new javax.swing.JButton();
        lblwelcomeUser = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(549, 476));

        btnQuickChatMenu.setText("QuickChat menu");
        btnQuickChatMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuickChatMenuActionPerformed(evt);
            }
        });

        lblwelcomeUser.setFont(new java.awt.Font("Microsoft Tai Le", 3, 14)); // NOI18N
        lblwelcomeUser.setForeground(new java.awt.Color(255, 0, 255));
        lblwelcomeUser.setText("WELCOME TO QUICKCHAT");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblwelcomeUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(268, Short.MAX_VALUE)
                .addComponent(btnQuickChatMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(175, 175, 175))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(lblwelcomeUser, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                .addComponent(btnQuickChatMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(143, 143, 143))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnQuickChatMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuickChatMenuActionPerformed
        // TODO add your handling code here:
        String input = JOptionPane.showInputDialog(this,
    "Please enter an option number:\n" +
    "1. Send Message\n" +
    "2. Show recently sent messages\n" +
    "3. Quit"
);

if (input == null) {
    JOptionPane.showMessageDialog(this, "Menu cancelled. No action taken.");
    return;
}

int choice;
try {
    choice = Integer.parseInt(input.trim());
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(this, "Invalid input. Please enter a number.");
    return;
}

        switch(choice){
    case 1:  // Send Message
        sendMessagesFunction();
        break;
    case 2:
                showReportsMenu();
                break;
    case 3:  // Quit
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to quit Quickchat?", "Confirm Quit", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            this.dispose();
            System.exit(0);
        }
        break;
    default:
        
        JOptionPane.showMessageDialog(this, "Invalid option selected. Please enter 1, 2, or 3.");
}
    }
        private void sendMessagesFunction() {
        //
       String numMessagesStr = JOptionPane.showInputDialog(this, "How many messages do you wish to send?");
    if (numMessagesStr == null || numMessagesStr.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Message sending cancelled.");
        return;
    }

    int numberOfMessages;
    try {
        numberOfMessages = Integer.parseInt(numMessagesStr.trim());
        if (numberOfMessages <= 0) {
            JOptionPane.showMessageDialog(this, "Please enter a positive number of messages.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid number entered. Please enter a numeric value.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    for (int i = 0; i < numberOfMessages; i++) {
        JOptionPane.showMessageDialog(this, "Entering Message " + (i + 1) + " of " + numberOfMessages);

        String recipient = JOptionPane.showInputDialog(this, "Enter recipient's cell number (e.g., +27123456789):");
        if (recipient == null || recipient.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Recipient input cancelled or empty. Skipping to next message.", "Warning", JOptionPane.WARNING_MESSAGE);
            continue;
        }
        recipient = recipient.trim();

        if (!Message.checkRecipientCell(recipient)) {
            JOptionPane.showMessageDialog(this, "Recipient cell number incorrect: must be '+27' followed by 9 digits (e.g., +27123456789).", "Input Error", JOptionPane.ERROR_MESSAGE);
            continue;
        }

        String messageContent = JOptionPane.showInputDialog(this, "Enter message content (max 250 characters):");
        if (messageContent == null || messageContent.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Message content input cancelled or empty. Skipping to next message.", "Warning", JOptionPane.WARNING_MESSAGE);
            continue;
        }
        messageContent = messageContent.trim();

        if (!Message.checkMessageContentLength(messageContent)) {
            JOptionPane.showMessageDialog(this, "Please enter a message of less than 250 characters.", "Input Error", JOptionPane.ERROR_MESSAGE);
            continue;
        }

        // Create the message
        Message currentMessage = new Message(loggedInUsername, recipient, messageContent);

        // Ask user what to do with the message
        Object[] messageOptions = {"Send Message", "Disregard Message", "Store Message"};
        int userChoice = JOptionPane.showOptionDialog(
                this,
                "Choose what you want to do with this message:\n" + currentMessage.toString(),
                "Message Action",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                messageOptions,
                messageOptions[0]
        );

        switch (userChoice) {
            case 0: // Send
                Message.sendMessage(currentMessage);
                JOptionPane.showMessageDialog(this, currentMessage.toString(), "Message Sent", JOptionPane.INFORMATION_MESSAGE);
                break;
            case 1: // Disregard
                JOptionPane.showMessageDialog(this, "Message disregarded.", "Info", JOptionPane.INFORMATION_MESSAGE);
                break;
            case 2: // Store
                Message.storeMessage(currentMessage);
                JOptionPane.showMessageDialog(this, "Message stored for later.", "Info", JOptionPane.INFORMATION_MESSAGE);
                break;
            default:
                JOptionPane.showMessageDialog(this, "No action taken on the message.", "Info", JOptionPane.INFORMATION_MESSAGE);
                break;
        }
    }
        // "The total number of messages should be accumulated and displayed once all the messages have been sent."
        JOptionPane.showMessageDialog(this, "Total messages: " + Message.returnTotalMessages(), "Total Messages Sent", JOptionPane.INFORMATION_MESSAGE);
        }
        private void showReportsMenu() {
        String[] options = {
                "1. Display senders & recipients of all sent messages",
                "2. Show the longest sent message",
                "3. Search message by ID",
                "4. Search messages by recipient",
                "5. Delete message by hash",
                "6. Display full message report",
                "7. Back to main menu"
        };
                          while (true) {
        String choice = (String) JOptionPane.showInputDialog(this, "Select a report option:", "Reports Menu",
                JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

        if (choice == null || choice.startsWith("7")) break;

        switch (choice.charAt(0)) {
            case '1':
                JOptionPane.showMessageDialog(this, Message.getSenderRecipientList(), "Senders and Recipients", JOptionPane.INFORMATION_MESSAGE);
                break;

            case '2':
                Message longest = Message.getLongestMessage();
                if (longest != null) {
                    JOptionPane.showMessageDialog(this, "Longest Message:\n" + longest, "Longest Message", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "No sent messages found.", "Longest Message", JOptionPane.WARNING_MESSAGE);
                }
                break;
                case '3':
                String id = JOptionPane.showInputDialog(this, "Enter Message ID:");
                if (id != null) {
                    Message found = Message.getMessageByID(id.trim());
                    if (found != null) {
                        JOptionPane.showMessageDialog(this, "Recipient: " + found.getRecipient() + "\nMessage: " + found.getContent(),
                                "Message Found", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Message ID not found.", "Search Result", JOptionPane.WARNING_MESSAGE);
                    }
                }
                break;
                                           case '4':
                String rec = JOptionPane.showInputDialog(this, "Enter recipient cell number:");
                if (rec != null) {
                    List<Message> messages = Message.searchMessagesByRecipient(rec.trim());
                    if (!messages.isEmpty()) {
                        StringBuilder sb = new StringBuilder();
                        for (Message m : messages) {
                            sb.append(m.toString()).append("\n\n");
                        }
                        JOptionPane.showMessageDialog(this, sb.toString(), "Messages to " + rec, JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "No messages found for recipient.", "Search Result", JOptionPane.WARNING_MESSAGE);
                    }
                }
                break;

            case '5':
                String hash = JOptionPane.showInputDialog(this, "Enter message hash to delete:");
                if (hash != null) {
                    boolean deleted = Message.deleteMessageByHash(hash.trim());
                    if (deleted) {
                        
                    JOptionPane.showMessageDialog(this, "Message deleted successfully.", "Delete Message", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Message hash not found.", "Delete Message", JOptionPane.WARNING_MESSAGE);
                    }
                }
                break;

            case '6':
                String fullReport = Message.getFullReport();
                if (fullReport.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "No sent messages to report.", "Full Report", JOptionPane.WARNING_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, fullReport, "Full Message Report", JOptionPane.INFORMATION_MESSAGE);
                }
                break;
                case '7':
        // Optional: Confirmation or log
        JOptionPane.showMessageDialog(this, "Returning to main menu.", "Info", JOptionPane.INFORMATION_MESSAGE);
        return;
        }
                          }
    }//GEN-LAST:event_btnQuickChatMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Quickchat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Quickchat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Quickchat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Quickchat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                String username;
                new Quickchat("Quickchat ").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnQuickChatMenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblwelcomeUser;
    // End of variables declaration//GEN-END:variables

}
